---
#@ load("funcs.lib.yml", "slack_hook", "pr_hook")
#@ load("@ytt:data", "data")
#@ load("@ytt:template", "template")

#@ env = data.values.env

#!  JOBS

jobs:
  - name: set-pipeline
    plan:
      - get: src
        params:
          #@ if/end env != 'dev':
          depth: 1
          #@ if/end env == 'dev':
          integration_tool: checkout
        trigger: true
      - get: pipeline-tasks
      - get: general-task
      - task: boot
        image: general-task
        file: pipeline-tasks/tasks/boot.yml
        params:
          ENV_OVERRIDE: ((deploy-env))
      - set_pipeline: self
        file: compiled/set-pipeline.yml
        instance_vars:
          deploy-env: ((deploy-env))

  - name: test-db
    plan:
      - get: src
        params:
          #@ if/end env != 'dev':
          depth: 1
          #@ if/end env == 'dev':
          integration_tool: checkout
        trigger: true
        passed: [set-pipeline]
      - in_parallel:
          - get: general-task
          - get: postgres
            params:
              format: oci
          - get: node
          - get: node-oci
            resource: node
            params:
              format: oci
          - get: pipeline-tasks
      #@ if/end env == 'dev':
      - #@ pr_hook("pending", "test-pages-editor")
      - task: install-deps
        file: src/ci/partials/install-deps.yml
        image: node

      - task: test
        file: src/ci/partials/test.yml
        privileged: true
    on_failure:
      in_parallel:
        -  #@ slack_hook("failure", "test")
        #@ if/end env == 'dev':
        -  #@ pr_hook("failure", "test-pages-editor")
    on_success:
      in_parallel:
        -  #@ slack_hook("success", "test")
        #@ if/end env == 'dev':
        -  #@ pr_hook("success", "test-pages-editor")


  - name: deploy-pages-editor
    plan:
      - get: src
        params:
          #@ if/end env != 'dev':
          depth: 1
          #@ if/end env == 'dev':
          integration_tool: checkout
        trigger: true
      #@ if/end env != 'dev':
        passed: [set-pipeline, test-db]
      #@ if/end env == 'dev':
        passed: [set-pipeline]
      - get: general-task
      - get: node
      - get: pipeline-tasks
      - task: install-deps
        file: src/ci/partials/install-deps.yml
        image: node
      #@ if/end env == 'dev':
      -  #@ pr_hook("pending", "deploy-pages-editor")
      - task: get-app-env
        image: general-task
        file: pipeline-tasks/tasks/get-app-env.yml
        params:
          _: #@ template.replace(data.values.env_cf_editor)
          APP_ENV: ((deploy-env))
          CF_APP_NAME: pages-editor-((deploy-env))

      - task: check-migrations
        file: src/ci/partials/check-migrations.yml
        image: node
        params:
          PAYLOAD_SECRET: citmpsecret

      - task: build
        file: src/ci/partials/build.yml
        image: node
        params:
          APP_ENV: ((deploy-env))
          #@ if/end env == 'dev':
          PUBLIC_URL: https://pages-editor-((deploy-env)).app.cloud.gov
          #@ if/end env == 'staging':
          PUBLIC_URL: https://publisher-((deploy-env)).cloud.gov
          #@ if/end env == 'production':
          PUBLIC_URL: https://publisher.cloud.gov

      - task: deploy
        file: src/ci/partials/deploy.yml
        image: general-task
        params:
          _: #@ template.replace(data.values.env_cf_editor)
          CF_APP_NAME: pages-editor-((deploy-env))
          CF_MANIFEST: src/.cloudgov/manifest.yml
          CF_VARS_FILE: src/.cloudgov/vars/pages-((deploy-env)).yml
          CF_PATH: src
        on_failure:
          try:
            task: cancel-api-deployment
            file: pipeline-tasks/tasks/cancel-deployment.yml
            image: general-task
            params:
              _: #@ template.replace(data.values.env_cf_editor)
              CF_APP_NAME: pages-((deploy-env))
    on_failure:
      in_parallel:
        -  #@ slack_hook("failure", "deployment")
        #@ if/end env == 'dev':
        -  #@ pr_hook("failure", "deploy-pages-editor")
    on_success:
      in_parallel:
        -  #@ slack_hook("success", "deployment")
        #@ if/end env == 'dev':
        -  #@ pr_hook("success", "deploy-pages-editor")

  - name: create-user-provided-service-pages-bucket-manager
    plan:
      - get: weekly-tuesdays-at-7am
        trigger: true
      - get: src
        params:
          #@ if/end env != 'dev':
          depth: 1
          #@ if/end env == 'dev':
          integration_tool: checkout
        passed: [set-pipeline]
      - get: general-task
      - get: pipeline-tasks

      - task: create-user-provided-service
        file: src/ci/partials/create-user-provided-service.yml
        image: general-task
        params:
          _: #@ template.replace(data.values.env_cf_editor)
          APP_ENV: ((deploy-env))
          SERVICE_NAME: pages-bucket-manager
          SERVICE_CREDENTIALS: ((pages_bucket_manager))
    on_failure:
      in_parallel:
        -  #@ slack_hook("failure", "create-user-provided-service-pages-bucket-manager")
    on_success:
      in_parallel:
        -  #@ slack_hook("success", "create-user-provided-service-pages-bucket-manager")

#!  RESOURCES

resources:
  #@ if/end env == 'dev':
  - name: src
    type: pull-request
    check_every: 1m
    source:
      repository: ((pages-editor-repository-path))
      access_token: ((pages-operations-ci-github-token))
      base_branch: main
      disable_forks: true
      ignore_drafts: false

  #@ if/end env == 'staging':
  - name: src
    type: git
    icon: github
    source:
      uri: git@github.com:((pages-editor-repository-path))
      branch: main
      commit_verification_keys: ((cloud-gov-pages-gpg-keys))
      private_key: ((pages-gpg-operations-github-sshkey.private_key))

  #@ if/end env == 'production':
  - name: src
    type: git
    icon: github
    source:
      uri: ((git-base-url))/((pages-editor-repository-path))
      branch: main
      commit_verification_keys: ((cloud-gov-pages-gpg-keys))
      tag_filter: 0.*.*
      fetch_tags: true


  - name: weekly-tuesdays-at-7am
    type: time
    source:
      interval: 168h
      location: America/Los_Angeles
      start: 7:00 AM
      stop: 7:30 AM
      days: [Tuesday]
      initial_version: true

  - name: node
  - name: slack
  - name: general-task
  - name: pipeline-tasks
  - name: postgres

#!  RESOURCE TYPES

resource_types:
  - name: git
  - name: slack-notification
  - name: registry-image
  - name: time
  #@ if/end env == 'dev':
  - name: pull-request
