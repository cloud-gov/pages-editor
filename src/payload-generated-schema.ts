/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:db-schema` to regenerate this file.
 */

import type {} from '@payloadcms/db-postgres'
import {
  pgTable,
  index,
  uniqueIndex,
  foreignKey,
  integer,
  varchar,
  serial,
  jsonb,
  boolean,
  timestamp,
  numeric,
  type AnyPgColumn,
  text,
  pgEnum,
} from '@payloadcms/db-postgres/drizzle/pg-core'
import { sql, relations } from '@payloadcms/db-postgres/drizzle'
export const enum_posts_example_custom_field = pgEnum('enum_posts_example_custom_field', [
  'radio',
  'television',
  'podcast',
  'video',
])
export const enum_posts_status = pgEnum('enum_posts_status', ['draft', 'published'])
export const enum__posts_v_version_example_custom_field = pgEnum(
  'enum__posts_v_version_example_custom_field',
  ['radio', 'television', 'podcast', 'video'],
)
export const enum__posts_v_version_status = pgEnum('enum__posts_v_version_status', [
  'draft',
  'published',
])
export const enum_events_format = pgEnum('enum_events_format', ['inperson', 'virtual'])
export const enum_events_event_type = pgEnum('enum_events_event_type', ['onetime', 'series'])
export const enum_events_status = pgEnum('enum_events_status', ['draft', 'published'])
export const enum__events_v_version_format = pgEnum('enum__events_v_version_format', [
  'inperson',
  'virtual',
])
export const enum__events_v_version_event_type = pgEnum('enum__events_v_version_event_type', [
  'onetime',
  'series',
])
export const enum__events_v_version_status = pgEnum('enum__events_v_version_status', [
  'draft',
  'published',
])
export const enum_news_status = pgEnum('enum_news_status', ['draft', 'published'])
export const enum__news_v_version_status = pgEnum('enum__news_v_version_status', [
  'draft',
  'published',
])
export const enum_reports_status = pgEnum('enum_reports_status', ['draft', 'published'])
export const enum__reports_v_version_status = pgEnum('enum__reports_v_version_status', [
  'draft',
  'published',
])
export const enum_pages_status = pgEnum('enum_pages_status', ['draft', 'published'])
export const enum__pages_v_version_status = pgEnum('enum__pages_v_version_status', [
  'draft',
  'published',
])
export const enum_policies_status = pgEnum('enum_policies_status', ['draft', 'published'])
export const enum__policies_v_version_status = pgEnum('enum__policies_v_version_status', [
  'draft',
  'published',
])
export const enum_site_config_site_collection_status = pgEnum(
  'enum_site_config_site_collection_status',
  ['draft', 'published'],
)
export const enum__site_config_site_collection_v_version_status = pgEnum(
  'enum__site_config_site_collection_v_version_status',
  ['draft', 'published'],
)
export const enum_redirects_to_type = pgEnum('enum_redirects_to_type', ['reference', 'custom'])
export const enum_forms_confirmation_type = pgEnum('enum_forms_confirmation_type', [
  'message',
  'redirect',
])
export const enum_users_sites_role = pgEnum('enum_users_sites_role', ['manager', 'user', 'bot'])
export const enum_site_config_status = pgEnum('enum_site_config_status', ['draft', 'published'])
export const enum__site_config_v_version_status = pgEnum('enum__site_config_v_version_status', [
  'draft',
  'published',
])

export const posts_populated_authors = pgTable(
  'posts_populated_authors',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name'),
  },
  (columns) => ({
    _orderIdx: index('posts_populated_authors_order_idx').on(columns._order),
    _parentIDIdx: index('posts_populated_authors_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [posts.id],
      name: 'posts_populated_authors_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const posts = pgTable(
  'posts',
  {
    id: serial('id').primaryKey(),
    title: varchar('title'),
    description: varchar('description'),
    image: integer('image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    site: integer('site_id').references(() => sites.id, {
      onDelete: 'set null',
    }),
    content: jsonb('content'),
    reviewReady: boolean('review_ready').default(false),
    publishedAt: timestamp('published_at', { mode: 'string', withTimezone: true, precision: 3 }),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    'Example Custom Field': enum_posts_example_custom_field('example_custom_field'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    _status: enum_posts_status('_status').default('draft'),
  },
  (columns) => ({
    posts_image_idx: index('posts_image_idx').on(columns.image),
    posts_site_idx: index('posts_site_idx').on(columns.site),
    posts_slug_idx: index('posts_slug_idx').on(columns.slug),
    posts_updated_at_idx: index('posts_updated_at_idx').on(columns.updatedAt),
    posts_created_at_idx: index('posts_created_at_idx').on(columns.createdAt),
    posts__status_idx: index('posts__status_idx').on(columns._status),
  }),
)

export const posts_rels = pgTable(
  'posts_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    categoriesID: integer('categories_id'),
    usersID: integer('users_id'),
  },
  (columns) => ({
    order: index('posts_rels_order_idx').on(columns.order),
    parentIdx: index('posts_rels_parent_idx').on(columns.parent),
    pathIdx: index('posts_rels_path_idx').on(columns.path),
    posts_rels_categories_id_idx: index('posts_rels_categories_id_idx').on(columns.categoriesID),
    posts_rels_users_id_idx: index('posts_rels_users_id_idx').on(columns.usersID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [posts.id],
      name: 'posts_rels_parent_fk',
    }).onDelete('cascade'),
    categoriesIdFk: foreignKey({
      columns: [columns['categoriesID']],
      foreignColumns: [categories.id],
      name: 'posts_rels_categories_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'posts_rels_users_fk',
    }).onDelete('cascade'),
  }),
)

export const _posts_v_version_populated_authors = pgTable(
  '_posts_v_version_populated_authors',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    _uuid: varchar('_uuid'),
    name: varchar('name'),
  },
  (columns) => ({
    _orderIdx: index('_posts_v_version_populated_authors_order_idx').on(columns._order),
    _parentIDIdx: index('_posts_v_version_populated_authors_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_posts_v.id],
      name: '_posts_v_version_populated_authors_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _posts_v = pgTable(
  '_posts_v',
  {
    id: serial('id').primaryKey(),
    parent: integer('parent_id').references(() => posts.id, {
      onDelete: 'set null',
    }),
    version_title: varchar('version_title'),
    version_description: varchar('version_description'),
    version_image: integer('version_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_site: integer('version_site_id').references(() => sites.id, {
      onDelete: 'set null',
    }),
    version_content: jsonb('version_content'),
    version_reviewReady: boolean('version_review_ready').default(false),
    version_publishedAt: timestamp('version_published_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_slug: varchar('version_slug'),
    version_slugLock: boolean('version_slug_lock').default(true),
    'version_Example Custom Field': enum__posts_v_version_example_custom_field(
      'version_example_custom_field',
    ),
    version_updatedAt: timestamp('version_updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_createdAt: timestamp('version_created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version__status: enum__posts_v_version_status('version__status').default('draft'),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    latest: boolean('latest'),
    autosave: boolean('autosave'),
  },
  (columns) => ({
    _posts_v_parent_idx: index('_posts_v_parent_idx').on(columns.parent),
    _posts_v_version_version_image_idx: index('_posts_v_version_version_image_idx').on(
      columns.version_image,
    ),
    _posts_v_version_version_site_idx: index('_posts_v_version_version_site_idx').on(
      columns.version_site,
    ),
    _posts_v_version_version_slug_idx: index('_posts_v_version_version_slug_idx').on(
      columns.version_slug,
    ),
    _posts_v_version_version_updated_at_idx: index('_posts_v_version_version_updated_at_idx').on(
      columns.version_updatedAt,
    ),
    _posts_v_version_version_created_at_idx: index('_posts_v_version_version_created_at_idx').on(
      columns.version_createdAt,
    ),
    _posts_v_version_version__status_idx: index('_posts_v_version_version__status_idx').on(
      columns.version__status,
    ),
    _posts_v_created_at_idx: index('_posts_v_created_at_idx').on(columns.createdAt),
    _posts_v_updated_at_idx: index('_posts_v_updated_at_idx').on(columns.updatedAt),
    _posts_v_latest_idx: index('_posts_v_latest_idx').on(columns.latest),
    _posts_v_autosave_idx: index('_posts_v_autosave_idx').on(columns.autosave),
  }),
)

export const _posts_v_rels = pgTable(
  '_posts_v_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    categoriesID: integer('categories_id'),
    usersID: integer('users_id'),
  },
  (columns) => ({
    order: index('_posts_v_rels_order_idx').on(columns.order),
    parentIdx: index('_posts_v_rels_parent_idx').on(columns.parent),
    pathIdx: index('_posts_v_rels_path_idx').on(columns.path),
    _posts_v_rels_categories_id_idx: index('_posts_v_rels_categories_id_idx').on(
      columns.categoriesID,
    ),
    _posts_v_rels_users_id_idx: index('_posts_v_rels_users_id_idx').on(columns.usersID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [_posts_v.id],
      name: '_posts_v_rels_parent_fk',
    }).onDelete('cascade'),
    categoriesIdFk: foreignKey({
      columns: [columns['categoriesID']],
      foreignColumns: [categories.id],
      name: '_posts_v_rels_categories_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: '_posts_v_rels_users_fk',
    }).onDelete('cascade'),
  }),
)

export const events = pgTable(
  'events',
  {
    id: serial('id').primaryKey(),
    title: varchar('title'),
    description: varchar('description'),
    image: integer('image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    site: integer('site_id').references(() => sites.id, {
      onDelete: 'set null',
    }),
    publishedAt: timestamp('published_at', { mode: 'string', withTimezone: true, precision: 3 }),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    startDate: timestamp('start_date', { mode: 'string', withTimezone: true, precision: 3 }),
    endDate: timestamp('end_date', { mode: 'string', withTimezone: true, precision: 3 }),
    location: varchar('location'),
    format: enum_events_format('format').default('inperson'),
    eventType: enum_events_event_type('event_type').default('onetime'),
    registrationUrl: varchar('registration_url'),
    content: jsonb('content'),
    reviewReady: boolean('review_ready').default(false),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    _status: enum_events_status('_status').default('draft'),
  },
  (columns) => ({
    events_image_idx: index('events_image_idx').on(columns.image),
    events_site_idx: index('events_site_idx').on(columns.site),
    events_slug_idx: index('events_slug_idx').on(columns.slug),
    events_updated_at_idx: index('events_updated_at_idx').on(columns.updatedAt),
    events_created_at_idx: index('events_created_at_idx').on(columns.createdAt),
    events__status_idx: index('events__status_idx').on(columns._status),
  }),
)

export const events_rels = pgTable(
  'events_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    mediaID: integer('media_id'),
    categoriesID: integer('categories_id'),
  },
  (columns) => ({
    order: index('events_rels_order_idx').on(columns.order),
    parentIdx: index('events_rels_parent_idx').on(columns.parent),
    pathIdx: index('events_rels_path_idx').on(columns.path),
    events_rels_media_id_idx: index('events_rels_media_id_idx').on(columns.mediaID),
    events_rels_categories_id_idx: index('events_rels_categories_id_idx').on(columns.categoriesID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [events.id],
      name: 'events_rels_parent_fk',
    }).onDelete('cascade'),
    mediaIdFk: foreignKey({
      columns: [columns['mediaID']],
      foreignColumns: [media.id],
      name: 'events_rels_media_fk',
    }).onDelete('cascade'),
    categoriesIdFk: foreignKey({
      columns: [columns['categoriesID']],
      foreignColumns: [categories.id],
      name: 'events_rels_categories_fk',
    }).onDelete('cascade'),
  }),
)

export const _events_v = pgTable(
  '_events_v',
  {
    id: serial('id').primaryKey(),
    parent: integer('parent_id').references(() => events.id, {
      onDelete: 'set null',
    }),
    version_title: varchar('version_title'),
    version_description: varchar('version_description'),
    version_image: integer('version_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_site: integer('version_site_id').references(() => sites.id, {
      onDelete: 'set null',
    }),
    version_publishedAt: timestamp('version_published_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_slug: varchar('version_slug'),
    version_slugLock: boolean('version_slug_lock').default(true),
    version_startDate: timestamp('version_start_date', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_endDate: timestamp('version_end_date', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_location: varchar('version_location'),
    version_format: enum__events_v_version_format('version_format').default('inperson'),
    version_eventType: enum__events_v_version_event_type('version_event_type').default('onetime'),
    version_registrationUrl: varchar('version_registration_url'),
    version_content: jsonb('version_content'),
    version_reviewReady: boolean('version_review_ready').default(false),
    version_updatedAt: timestamp('version_updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_createdAt: timestamp('version_created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version__status: enum__events_v_version_status('version__status').default('draft'),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    latest: boolean('latest'),
    autosave: boolean('autosave'),
  },
  (columns) => ({
    _events_v_parent_idx: index('_events_v_parent_idx').on(columns.parent),
    _events_v_version_version_image_idx: index('_events_v_version_version_image_idx').on(
      columns.version_image,
    ),
    _events_v_version_version_site_idx: index('_events_v_version_version_site_idx').on(
      columns.version_site,
    ),
    _events_v_version_version_slug_idx: index('_events_v_version_version_slug_idx').on(
      columns.version_slug,
    ),
    _events_v_version_version_updated_at_idx: index('_events_v_version_version_updated_at_idx').on(
      columns.version_updatedAt,
    ),
    _events_v_version_version_created_at_idx: index('_events_v_version_version_created_at_idx').on(
      columns.version_createdAt,
    ),
    _events_v_version_version__status_idx: index('_events_v_version_version__status_idx').on(
      columns.version__status,
    ),
    _events_v_created_at_idx: index('_events_v_created_at_idx').on(columns.createdAt),
    _events_v_updated_at_idx: index('_events_v_updated_at_idx').on(columns.updatedAt),
    _events_v_latest_idx: index('_events_v_latest_idx').on(columns.latest),
    _events_v_autosave_idx: index('_events_v_autosave_idx').on(columns.autosave),
  }),
)

export const _events_v_rels = pgTable(
  '_events_v_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    mediaID: integer('media_id'),
    categoriesID: integer('categories_id'),
  },
  (columns) => ({
    order: index('_events_v_rels_order_idx').on(columns.order),
    parentIdx: index('_events_v_rels_parent_idx').on(columns.parent),
    pathIdx: index('_events_v_rels_path_idx').on(columns.path),
    _events_v_rels_media_id_idx: index('_events_v_rels_media_id_idx').on(columns.mediaID),
    _events_v_rels_categories_id_idx: index('_events_v_rels_categories_id_idx').on(
      columns.categoriesID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [_events_v.id],
      name: '_events_v_rels_parent_fk',
    }).onDelete('cascade'),
    mediaIdFk: foreignKey({
      columns: [columns['mediaID']],
      foreignColumns: [media.id],
      name: '_events_v_rels_media_fk',
    }).onDelete('cascade'),
    categoriesIdFk: foreignKey({
      columns: [columns['categoriesID']],
      foreignColumns: [categories.id],
      name: '_events_v_rels_categories_fk',
    }).onDelete('cascade'),
  }),
)

export const news = pgTable(
  'news',
  {
    id: serial('id').primaryKey(),
    title: varchar('title'),
    description: varchar('description'),
    image: integer('image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    content: jsonb('content'),
    site: integer('site_id').references(() => sites.id, {
      onDelete: 'set null',
    }),
    reviewReady: boolean('review_ready').default(false),
    publishedAt: timestamp('published_at', { mode: 'string', withTimezone: true, precision: 3 }),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    _status: enum_news_status('_status').default('draft'),
  },
  (columns) => ({
    news_image_idx: index('news_image_idx').on(columns.image),
    news_site_idx: index('news_site_idx').on(columns.site),
    news_slug_idx: index('news_slug_idx').on(columns.slug),
    news_updated_at_idx: index('news_updated_at_idx').on(columns.updatedAt),
    news_created_at_idx: index('news_created_at_idx').on(columns.createdAt),
    news__status_idx: index('news__status_idx').on(columns._status),
  }),
)

export const news_rels = pgTable(
  'news_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    categoriesID: integer('categories_id'),
  },
  (columns) => ({
    order: index('news_rels_order_idx').on(columns.order),
    parentIdx: index('news_rels_parent_idx').on(columns.parent),
    pathIdx: index('news_rels_path_idx').on(columns.path),
    news_rels_categories_id_idx: index('news_rels_categories_id_idx').on(columns.categoriesID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [news.id],
      name: 'news_rels_parent_fk',
    }).onDelete('cascade'),
    categoriesIdFk: foreignKey({
      columns: [columns['categoriesID']],
      foreignColumns: [categories.id],
      name: 'news_rels_categories_fk',
    }).onDelete('cascade'),
  }),
)

export const _news_v = pgTable(
  '_news_v',
  {
    id: serial('id').primaryKey(),
    parent: integer('parent_id').references(() => news.id, {
      onDelete: 'set null',
    }),
    version_title: varchar('version_title'),
    version_description: varchar('version_description'),
    version_image: integer('version_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_content: jsonb('version_content'),
    version_site: integer('version_site_id').references(() => sites.id, {
      onDelete: 'set null',
    }),
    version_reviewReady: boolean('version_review_ready').default(false),
    version_publishedAt: timestamp('version_published_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_slug: varchar('version_slug'),
    version_slugLock: boolean('version_slug_lock').default(true),
    version_updatedAt: timestamp('version_updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_createdAt: timestamp('version_created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version__status: enum__news_v_version_status('version__status').default('draft'),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    latest: boolean('latest'),
    autosave: boolean('autosave'),
  },
  (columns) => ({
    _news_v_parent_idx: index('_news_v_parent_idx').on(columns.parent),
    _news_v_version_version_image_idx: index('_news_v_version_version_image_idx').on(
      columns.version_image,
    ),
    _news_v_version_version_site_idx: index('_news_v_version_version_site_idx').on(
      columns.version_site,
    ),
    _news_v_version_version_slug_idx: index('_news_v_version_version_slug_idx').on(
      columns.version_slug,
    ),
    _news_v_version_version_updated_at_idx: index('_news_v_version_version_updated_at_idx').on(
      columns.version_updatedAt,
    ),
    _news_v_version_version_created_at_idx: index('_news_v_version_version_created_at_idx').on(
      columns.version_createdAt,
    ),
    _news_v_version_version__status_idx: index('_news_v_version_version__status_idx').on(
      columns.version__status,
    ),
    _news_v_created_at_idx: index('_news_v_created_at_idx').on(columns.createdAt),
    _news_v_updated_at_idx: index('_news_v_updated_at_idx').on(columns.updatedAt),
    _news_v_latest_idx: index('_news_v_latest_idx').on(columns.latest),
    _news_v_autosave_idx: index('_news_v_autosave_idx').on(columns.autosave),
  }),
)

export const _news_v_rels = pgTable(
  '_news_v_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    categoriesID: integer('categories_id'),
  },
  (columns) => ({
    order: index('_news_v_rels_order_idx').on(columns.order),
    parentIdx: index('_news_v_rels_parent_idx').on(columns.parent),
    pathIdx: index('_news_v_rels_path_idx').on(columns.path),
    _news_v_rels_categories_id_idx: index('_news_v_rels_categories_id_idx').on(
      columns.categoriesID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [_news_v.id],
      name: '_news_v_rels_parent_fk',
    }).onDelete('cascade'),
    categoriesIdFk: foreignKey({
      columns: [columns['categoriesID']],
      foreignColumns: [categories.id],
      name: '_news_v_rels_categories_fk',
    }).onDelete('cascade'),
  }),
)

export const media = pgTable(
  'media',
  {
    id: serial('id').primaryKey(),
    altText: varchar('alt_text'),
    site: integer('site_id')
      .notNull()
      .references(() => sites.id, {
        onDelete: 'set null',
      }),
    prefix: varchar('prefix').default('_uploads'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    url: varchar('url'),
    thumbnailURL: varchar('thumbnail_u_r_l'),
    filename: varchar('filename'),
    mimeType: varchar('mime_type'),
    filesize: numeric('filesize'),
    width: numeric('width'),
    height: numeric('height'),
    focalX: numeric('focal_x'),
    focalY: numeric('focal_y'),
    sizes_thumbnail_url: varchar('sizes_thumbnail_url'),
    sizes_thumbnail_width: numeric('sizes_thumbnail_width'),
    sizes_thumbnail_height: numeric('sizes_thumbnail_height'),
    sizes_thumbnail_mimeType: varchar('sizes_thumbnail_mime_type'),
    sizes_thumbnail_filesize: numeric('sizes_thumbnail_filesize'),
    sizes_thumbnail_filename: varchar('sizes_thumbnail_filename'),
    sizes_square_url: varchar('sizes_square_url'),
    sizes_square_width: numeric('sizes_square_width'),
    sizes_square_height: numeric('sizes_square_height'),
    sizes_square_mimeType: varchar('sizes_square_mime_type'),
    sizes_square_filesize: numeric('sizes_square_filesize'),
    sizes_square_filename: varchar('sizes_square_filename'),
    sizes_small_url: varchar('sizes_small_url'),
    sizes_small_width: numeric('sizes_small_width'),
    sizes_small_height: numeric('sizes_small_height'),
    sizes_small_mimeType: varchar('sizes_small_mime_type'),
    sizes_small_filesize: numeric('sizes_small_filesize'),
    sizes_small_filename: varchar('sizes_small_filename'),
    sizes_medium_url: varchar('sizes_medium_url'),
    sizes_medium_width: numeric('sizes_medium_width'),
    sizes_medium_height: numeric('sizes_medium_height'),
    sizes_medium_mimeType: varchar('sizes_medium_mime_type'),
    sizes_medium_filesize: numeric('sizes_medium_filesize'),
    sizes_medium_filename: varchar('sizes_medium_filename'),
    sizes_large_url: varchar('sizes_large_url'),
    sizes_large_width: numeric('sizes_large_width'),
    sizes_large_height: numeric('sizes_large_height'),
    sizes_large_mimeType: varchar('sizes_large_mime_type'),
    sizes_large_filesize: numeric('sizes_large_filesize'),
    sizes_large_filename: varchar('sizes_large_filename'),
    sizes_xlarge_url: varchar('sizes_xlarge_url'),
    sizes_xlarge_width: numeric('sizes_xlarge_width'),
    sizes_xlarge_height: numeric('sizes_xlarge_height'),
    sizes_xlarge_mimeType: varchar('sizes_xlarge_mime_type'),
    sizes_xlarge_filesize: numeric('sizes_xlarge_filesize'),
    sizes_xlarge_filename: varchar('sizes_xlarge_filename'),
    sizes_og_url: varchar('sizes_og_url'),
    sizes_og_width: numeric('sizes_og_width'),
    sizes_og_height: numeric('sizes_og_height'),
    sizes_og_mimeType: varchar('sizes_og_mime_type'),
    sizes_og_filesize: numeric('sizes_og_filesize'),
    sizes_og_filename: varchar('sizes_og_filename'),
  },
  (columns) => ({
    media_site_idx: index('media_site_idx').on(columns.site),
    media_updated_at_idx: index('media_updated_at_idx').on(columns.updatedAt),
    media_created_at_idx: index('media_created_at_idx').on(columns.createdAt),
    media_filename_idx: uniqueIndex('media_filename_idx').on(columns.filename),
    media_sizes_thumbnail_sizes_thumbnail_filename_idx: index(
      'media_sizes_thumbnail_sizes_thumbnail_filename_idx',
    ).on(columns.sizes_thumbnail_filename),
    media_sizes_square_sizes_square_filename_idx: index(
      'media_sizes_square_sizes_square_filename_idx',
    ).on(columns.sizes_square_filename),
    media_sizes_small_sizes_small_filename_idx: index(
      'media_sizes_small_sizes_small_filename_idx',
    ).on(columns.sizes_small_filename),
    media_sizes_medium_sizes_medium_filename_idx: index(
      'media_sizes_medium_sizes_medium_filename_idx',
    ).on(columns.sizes_medium_filename),
    media_sizes_large_sizes_large_filename_idx: index(
      'media_sizes_large_sizes_large_filename_idx',
    ).on(columns.sizes_large_filename),
    media_sizes_xlarge_sizes_xlarge_filename_idx: index(
      'media_sizes_xlarge_sizes_xlarge_filename_idx',
    ).on(columns.sizes_xlarge_filename),
    media_sizes_og_sizes_og_filename_idx: index('media_sizes_og_sizes_og_filename_idx').on(
      columns.sizes_og_filename,
    ),
  }),
)

export const reports_report_files = pgTable(
  'reports_report_files',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    file: integer('file_id').references(() => media.id, {
      onDelete: 'set null',
    }),
  },
  (columns) => ({
    _orderIdx: index('reports_report_files_order_idx').on(columns._order),
    _parentIDIdx: index('reports_report_files_parent_id_idx').on(columns._parentID),
    reports_report_files_file_idx: index('reports_report_files_file_idx').on(columns.file),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [reports.id],
      name: 'reports_report_files_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const reports = pgTable(
  'reports',
  {
    id: serial('id').primaryKey(),
    title: varchar('title'),
    excerpt: varchar('excerpt'),
    image: integer('image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    reportDate: timestamp('report_date', { mode: 'string', withTimezone: true, precision: 3 }),
    site: integer('site_id').references(() => sites.id, {
      onDelete: 'set null',
    }),
    content: jsonb('content'),
    reviewReady: boolean('review_ready').default(false),
    publishedAt: timestamp('published_at', { mode: 'string', withTimezone: true, precision: 3 }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    _status: enum_reports_status('_status').default('draft'),
  },
  (columns) => ({
    reports_image_idx: index('reports_image_idx').on(columns.image),
    reports_slug_idx: index('reports_slug_idx').on(columns.slug),
    reports_site_idx: index('reports_site_idx').on(columns.site),
    reports_updated_at_idx: index('reports_updated_at_idx').on(columns.updatedAt),
    reports_created_at_idx: index('reports_created_at_idx').on(columns.createdAt),
    reports__status_idx: index('reports__status_idx').on(columns._status),
  }),
)

export const reports_rels = pgTable(
  'reports_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    categoriesID: integer('categories_id'),
  },
  (columns) => ({
    order: index('reports_rels_order_idx').on(columns.order),
    parentIdx: index('reports_rels_parent_idx').on(columns.parent),
    pathIdx: index('reports_rels_path_idx').on(columns.path),
    reports_rels_categories_id_idx: index('reports_rels_categories_id_idx').on(
      columns.categoriesID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [reports.id],
      name: 'reports_rels_parent_fk',
    }).onDelete('cascade'),
    categoriesIdFk: foreignKey({
      columns: [columns['categoriesID']],
      foreignColumns: [categories.id],
      name: 'reports_rels_categories_fk',
    }).onDelete('cascade'),
  }),
)

export const _reports_v_version_report_files = pgTable(
  '_reports_v_version_report_files',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    file: integer('file_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_reports_v_version_report_files_order_idx').on(columns._order),
    _parentIDIdx: index('_reports_v_version_report_files_parent_id_idx').on(columns._parentID),
    _reports_v_version_report_files_file_idx: index('_reports_v_version_report_files_file_idx').on(
      columns.file,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_reports_v.id],
      name: '_reports_v_version_report_files_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _reports_v = pgTable(
  '_reports_v',
  {
    id: serial('id').primaryKey(),
    parent: integer('parent_id').references(() => reports.id, {
      onDelete: 'set null',
    }),
    version_title: varchar('version_title'),
    version_excerpt: varchar('version_excerpt'),
    version_image: integer('version_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_slug: varchar('version_slug'),
    version_slugLock: boolean('version_slug_lock').default(true),
    version_reportDate: timestamp('version_report_date', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_site: integer('version_site_id').references(() => sites.id, {
      onDelete: 'set null',
    }),
    version_content: jsonb('version_content'),
    version_reviewReady: boolean('version_review_ready').default(false),
    version_publishedAt: timestamp('version_published_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_updatedAt: timestamp('version_updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_createdAt: timestamp('version_created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version__status: enum__reports_v_version_status('version__status').default('draft'),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    latest: boolean('latest'),
    autosave: boolean('autosave'),
  },
  (columns) => ({
    _reports_v_parent_idx: index('_reports_v_parent_idx').on(columns.parent),
    _reports_v_version_version_image_idx: index('_reports_v_version_version_image_idx').on(
      columns.version_image,
    ),
    _reports_v_version_version_slug_idx: index('_reports_v_version_version_slug_idx').on(
      columns.version_slug,
    ),
    _reports_v_version_version_site_idx: index('_reports_v_version_version_site_idx').on(
      columns.version_site,
    ),
    _reports_v_version_version_updated_at_idx: index(
      '_reports_v_version_version_updated_at_idx',
    ).on(columns.version_updatedAt),
    _reports_v_version_version_created_at_idx: index(
      '_reports_v_version_version_created_at_idx',
    ).on(columns.version_createdAt),
    _reports_v_version_version__status_idx: index('_reports_v_version_version__status_idx').on(
      columns.version__status,
    ),
    _reports_v_created_at_idx: index('_reports_v_created_at_idx').on(columns.createdAt),
    _reports_v_updated_at_idx: index('_reports_v_updated_at_idx').on(columns.updatedAt),
    _reports_v_latest_idx: index('_reports_v_latest_idx').on(columns.latest),
    _reports_v_autosave_idx: index('_reports_v_autosave_idx').on(columns.autosave),
  }),
)

export const _reports_v_rels = pgTable(
  '_reports_v_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    categoriesID: integer('categories_id'),
  },
  (columns) => ({
    order: index('_reports_v_rels_order_idx').on(columns.order),
    parentIdx: index('_reports_v_rels_parent_idx').on(columns.parent),
    pathIdx: index('_reports_v_rels_path_idx').on(columns.path),
    _reports_v_rels_categories_id_idx: index('_reports_v_rels_categories_id_idx').on(
      columns.categoriesID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [_reports_v.id],
      name: '_reports_v_rels_parent_fk',
    }).onDelete('cascade'),
    categoriesIdFk: foreignKey({
      columns: [columns['categoriesID']],
      foreignColumns: [categories.id],
      name: '_reports_v_rels_categories_fk',
    }).onDelete('cascade'),
  }),
)

export const pages = pgTable(
  'pages',
  {
    id: serial('id').primaryKey(),
    title: varchar('title'),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    subtitle: varchar('subtitle'),
    label: varchar('label'),
    image: integer('image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    content: jsonb('content'),
    site: integer('site_id').references(() => sites.id, {
      onDelete: 'set null',
    }),
    reviewReady: boolean('review_ready').default(false),
    publishedAt: timestamp('published_at', { mode: 'string', withTimezone: true, precision: 3 }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    _status: enum_pages_status('_status').default('draft'),
  },
  (columns) => ({
    pages_slug_idx: index('pages_slug_idx').on(columns.slug),
    pages_image_idx: index('pages_image_idx').on(columns.image),
    pages_site_idx: index('pages_site_idx').on(columns.site),
    pages_updated_at_idx: index('pages_updated_at_idx').on(columns.updatedAt),
    pages_created_at_idx: index('pages_created_at_idx').on(columns.createdAt),
    pages__status_idx: index('pages__status_idx').on(columns._status),
  }),
)

export const _pages_v = pgTable(
  '_pages_v',
  {
    id: serial('id').primaryKey(),
    parent: integer('parent_id').references(() => pages.id, {
      onDelete: 'set null',
    }),
    version_title: varchar('version_title'),
    version_slug: varchar('version_slug'),
    version_slugLock: boolean('version_slug_lock').default(true),
    version_subtitle: varchar('version_subtitle'),
    version_label: varchar('version_label'),
    version_image: integer('version_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_content: jsonb('version_content'),
    version_site: integer('version_site_id').references(() => sites.id, {
      onDelete: 'set null',
    }),
    version_reviewReady: boolean('version_review_ready').default(false),
    version_publishedAt: timestamp('version_published_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_updatedAt: timestamp('version_updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_createdAt: timestamp('version_created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version__status: enum__pages_v_version_status('version__status').default('draft'),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    latest: boolean('latest'),
    autosave: boolean('autosave'),
  },
  (columns) => ({
    _pages_v_parent_idx: index('_pages_v_parent_idx').on(columns.parent),
    _pages_v_version_version_slug_idx: index('_pages_v_version_version_slug_idx').on(
      columns.version_slug,
    ),
    _pages_v_version_version_image_idx: index('_pages_v_version_version_image_idx').on(
      columns.version_image,
    ),
    _pages_v_version_version_site_idx: index('_pages_v_version_version_site_idx').on(
      columns.version_site,
    ),
    _pages_v_version_version_updated_at_idx: index('_pages_v_version_version_updated_at_idx').on(
      columns.version_updatedAt,
    ),
    _pages_v_version_version_created_at_idx: index('_pages_v_version_version_created_at_idx').on(
      columns.version_createdAt,
    ),
    _pages_v_version_version__status_idx: index('_pages_v_version_version__status_idx').on(
      columns.version__status,
    ),
    _pages_v_created_at_idx: index('_pages_v_created_at_idx').on(columns.createdAt),
    _pages_v_updated_at_idx: index('_pages_v_updated_at_idx').on(columns.updatedAt),
    _pages_v_latest_idx: index('_pages_v_latest_idx').on(columns.latest),
    _pages_v_autosave_idx: index('_pages_v_autosave_idx').on(columns.autosave),
  }),
)

export const policies = pgTable(
  'policies',
  {
    id: serial('id').primaryKey(),
    title: varchar('title'),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    label: varchar('label'),
    content: jsonb('content'),
    site: integer('site_id').references(() => sites.id, {
      onDelete: 'set null',
    }),
    reviewReady: boolean('review_ready').default(false),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    _status: enum_policies_status('_status').default('draft'),
  },
  (columns) => ({
    policies_slug_idx: index('policies_slug_idx').on(columns.slug),
    policies_site_idx: index('policies_site_idx').on(columns.site),
    policies_updated_at_idx: index('policies_updated_at_idx').on(columns.updatedAt),
    policies_created_at_idx: index('policies_created_at_idx').on(columns.createdAt),
    policies__status_idx: index('policies__status_idx').on(columns._status),
  }),
)

export const _policies_v = pgTable(
  '_policies_v',
  {
    id: serial('id').primaryKey(),
    parent: integer('parent_id').references(() => policies.id, {
      onDelete: 'set null',
    }),
    version_title: varchar('version_title'),
    version_slug: varchar('version_slug'),
    version_slugLock: boolean('version_slug_lock').default(true),
    version_label: varchar('version_label'),
    version_content: jsonb('version_content'),
    version_site: integer('version_site_id').references(() => sites.id, {
      onDelete: 'set null',
    }),
    version_reviewReady: boolean('version_review_ready').default(false),
    version_updatedAt: timestamp('version_updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_createdAt: timestamp('version_created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version__status: enum__policies_v_version_status('version__status').default('draft'),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    latest: boolean('latest'),
    autosave: boolean('autosave'),
  },
  (columns) => ({
    _policies_v_parent_idx: index('_policies_v_parent_idx').on(columns.parent),
    _policies_v_version_version_slug_idx: index('_policies_v_version_version_slug_idx').on(
      columns.version_slug,
    ),
    _policies_v_version_version_site_idx: index('_policies_v_version_version_site_idx').on(
      columns.version_site,
    ),
    _policies_v_version_version_updated_at_idx: index(
      '_policies_v_version_version_updated_at_idx',
    ).on(columns.version_updatedAt),
    _policies_v_version_version_created_at_idx: index(
      '_policies_v_version_version_created_at_idx',
    ).on(columns.version_createdAt),
    _policies_v_version_version__status_idx: index('_policies_v_version_version__status_idx').on(
      columns.version__status,
    ),
    _policies_v_created_at_idx: index('_policies_v_created_at_idx').on(columns.createdAt),
    _policies_v_updated_at_idx: index('_policies_v_updated_at_idx').on(columns.updatedAt),
    _policies_v_latest_idx: index('_policies_v_latest_idx').on(columns.latest),
    _policies_v_autosave_idx: index('_policies_v_autosave_idx').on(columns.autosave),
  }),
)

export const categories_breadcrumbs = pgTable(
  'categories_breadcrumbs',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    doc: integer('doc_id').references(() => categories.id, {
      onDelete: 'set null',
    }),
    url: varchar('url'),
    label: varchar('label'),
  },
  (columns) => ({
    _orderIdx: index('categories_breadcrumbs_order_idx').on(columns._order),
    _parentIDIdx: index('categories_breadcrumbs_parent_id_idx').on(columns._parentID),
    categories_breadcrumbs_doc_idx: index('categories_breadcrumbs_doc_idx').on(columns.doc),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [categories.id],
      name: 'categories_breadcrumbs_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const categories = pgTable(
  'categories',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    site: integer('site_id')
      .notNull()
      .references(() => sites.id, {
        onDelete: 'set null',
      }),
    parent: integer('parent_id').references((): AnyPgColumn => categories.id, {
      onDelete: 'set null',
    }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    categories_slug_idx: index('categories_slug_idx').on(columns.slug),
    categories_site_idx: index('categories_site_idx').on(columns.site),
    categories_parent_idx: index('categories_parent_idx').on(columns.parent),
    categories_updated_at_idx: index('categories_updated_at_idx').on(columns.updatedAt),
    categories_created_at_idx: index('categories_created_at_idx').on(columns.createdAt),
  }),
)

export const sites = pgTable(
  'sites',
  {
    id: serial('id').primaryKey(),
    name: varchar('name').notNull(),
    initialManagerEmail: varchar('initial_manager_email')
      .notNull()
      .default('placeholder@agency.gov'),
    pagesOrg: varchar('pages_org'),
    pagesSiteId: numeric('pages_site_id'),
    orgId: numeric('org_id'),
    bucket: varchar('bucket'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    sites_name_idx: uniqueIndex('sites_name_idx').on(columns.name),
    sites_updated_at_idx: index('sites_updated_at_idx').on(columns.updatedAt),
    sites_created_at_idx: index('sites_created_at_idx').on(columns.createdAt),
  }),
)

export const site_config_site_collection = pgTable(
  'site_config_site_collection',
  {
    id: serial('id').primaryKey(),
    font: varchar('font'),
    agencyName: varchar('agency_name').default('Agency Name'),
    site: integer('site_id').references(() => sites.id, {
      onDelete: 'set null',
    }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    _status: enum_site_config_site_collection_status('_status').default('draft'),
  },
  (columns) => ({
    site_config_site_collection_site_idx: index('site_config_site_collection_site_idx').on(
      columns.site,
    ),
    site_config_site_collection_updated_at_idx: index(
      'site_config_site_collection_updated_at_idx',
    ).on(columns.updatedAt),
    site_config_site_collection_created_at_idx: index(
      'site_config_site_collection_created_at_idx',
    ).on(columns.createdAt),
    site_config_site_collection__status_idx: index('site_config_site_collection__status_idx').on(
      columns._status,
    ),
  }),
)

export const _site_config_site_collection_v = pgTable(
  '_site_config_site_collection_v',
  {
    id: serial('id').primaryKey(),
    parent: integer('parent_id').references(() => site_config_site_collection.id, {
      onDelete: 'set null',
    }),
    version_font: varchar('version_font'),
    version_agencyName: varchar('version_agency_name').default('Agency Name'),
    version_site: integer('version_site_id').references(() => sites.id, {
      onDelete: 'set null',
    }),
    version_updatedAt: timestamp('version_updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_createdAt: timestamp('version_created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version__status:
      enum__site_config_site_collection_v_version_status('version__status').default('draft'),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    latest: boolean('latest'),
    autosave: boolean('autosave'),
  },
  (columns) => ({
    _site_config_site_collection_v_parent_idx: index(
      '_site_config_site_collection_v_parent_idx',
    ).on(columns.parent),
    _site_config_site_collection_v_version_version_site_idx: index(
      '_site_config_site_collection_v_version_version_site_idx',
    ).on(columns.version_site),
    _site_config_site_collection_v_version_version_updated_a_idx: index(
      '_site_config_site_collection_v_version_version_updated_a_idx',
    ).on(columns.version_updatedAt),
    _site_config_site_collection_v_version_version_created_a_idx: index(
      '_site_config_site_collection_v_version_version_created_a_idx',
    ).on(columns.version_createdAt),
    _site_config_site_collection_v_version_version__status_idx: index(
      '_site_config_site_collection_v_version_version__status_idx',
    ).on(columns.version__status),
    _site_config_site_collection_v_created_at_idx: index(
      '_site_config_site_collection_v_created_at_idx',
    ).on(columns.createdAt),
    _site_config_site_collection_v_updated_at_idx: index(
      '_site_config_site_collection_v_updated_at_idx',
    ).on(columns.updatedAt),
    _site_config_site_collection_v_latest_idx: index(
      '_site_config_site_collection_v_latest_idx',
    ).on(columns.latest),
    _site_config_site_collection_v_autosave_idx: index(
      '_site_config_site_collection_v_autosave_idx',
    ).on(columns.autosave),
  }),
)

export const collection_landing_pages = pgTable(
  'collection_landing_pages',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    slug: varchar('slug').notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    collection_landing_pages_slug_idx: uniqueIndex('collection_landing_pages_slug_idx').on(
      columns.slug,
    ),
    collection_landing_pages_updated_at_idx: index('collection_landing_pages_updated_at_idx').on(
      columns.updatedAt,
    ),
    collection_landing_pages_created_at_idx: index('collection_landing_pages_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const redirects = pgTable(
  'redirects',
  {
    id: serial('id').primaryKey(),
    from: varchar('from').notNull(),
    to_type: enum_redirects_to_type('to_type').default('reference'),
    to_url: varchar('to_url'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    redirects_from_idx: uniqueIndex('redirects_from_idx').on(columns.from),
    redirects_updated_at_idx: index('redirects_updated_at_idx').on(columns.updatedAt),
    redirects_created_at_idx: index('redirects_created_at_idx').on(columns.createdAt),
  }),
)

export const redirects_rels = pgTable(
  'redirects_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    postsID: integer('posts_id'),
  },
  (columns) => ({
    order: index('redirects_rels_order_idx').on(columns.order),
    parentIdx: index('redirects_rels_parent_idx').on(columns.parent),
    pathIdx: index('redirects_rels_path_idx').on(columns.path),
    redirects_rels_posts_id_idx: index('redirects_rels_posts_id_idx').on(columns.postsID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [redirects.id],
      name: 'redirects_rels_parent_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: 'redirects_rels_posts_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_checkbox = pgTable(
  'forms_blocks_checkbox',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    label: varchar('label'),
    width: numeric('width'),
    required: boolean('required'),
    defaultValue: boolean('default_value'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_checkbox_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_checkbox_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_checkbox_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_checkbox_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_country = pgTable(
  'forms_blocks_country',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    label: varchar('label'),
    width: numeric('width'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_country_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_country_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_country_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_country_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_email = pgTable(
  'forms_blocks_email',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    label: varchar('label'),
    width: numeric('width'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_email_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_email_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_email_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_email_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_message = pgTable(
  'forms_blocks_message',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    message: jsonb('message'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_message_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_message_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_message_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_message_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_number = pgTable(
  'forms_blocks_number',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    label: varchar('label'),
    width: numeric('width'),
    defaultValue: numeric('default_value'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_number_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_number_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_number_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_number_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_select_options = pgTable(
  'forms_blocks_select_options',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    label: varchar('label').notNull(),
    value: varchar('value').notNull(),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_select_options_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_select_options_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms_blocks_select.id],
      name: 'forms_blocks_select_options_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_select = pgTable(
  'forms_blocks_select',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    label: varchar('label'),
    width: numeric('width'),
    defaultValue: varchar('default_value'),
    placeholder: varchar('placeholder'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_select_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_select_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_select_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_select_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_state = pgTable(
  'forms_blocks_state',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    label: varchar('label'),
    width: numeric('width'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_state_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_state_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_state_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_state_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_text = pgTable(
  'forms_blocks_text',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    label: varchar('label'),
    width: numeric('width'),
    defaultValue: varchar('default_value'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_text_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_text_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_text_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_text_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_textarea = pgTable(
  'forms_blocks_textarea',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    label: varchar('label'),
    width: numeric('width'),
    defaultValue: varchar('default_value'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_textarea_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_textarea_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_textarea_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_textarea_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_emails = pgTable(
  'forms_emails',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    emailTo: varchar('email_to'),
    cc: varchar('cc'),
    bcc: varchar('bcc'),
    replyTo: varchar('reply_to'),
    emailFrom: varchar('email_from'),
    subject: varchar('subject').notNull().default("You've received a new message."),
    message: jsonb('message'),
  },
  (columns) => ({
    _orderIdx: index('forms_emails_order_idx').on(columns._order),
    _parentIDIdx: index('forms_emails_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_emails_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms = pgTable(
  'forms',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    submitButtonLabel: varchar('submit_button_label'),
    confirmationType: enum_forms_confirmation_type('confirmation_type').default('message'),
    confirmationMessage: jsonb('confirmation_message'),
    redirect_url: varchar('redirect_url'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    forms_updated_at_idx: index('forms_updated_at_idx').on(columns.updatedAt),
    forms_created_at_idx: index('forms_created_at_idx').on(columns.createdAt),
  }),
)

export const form_submissions_submission_data = pgTable(
  'form_submissions_submission_data',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    field: varchar('field').notNull(),
    value: varchar('value').notNull(),
  },
  (columns) => ({
    _orderIdx: index('form_submissions_submission_data_order_idx').on(columns._order),
    _parentIDIdx: index('form_submissions_submission_data_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [form_submissions.id],
      name: 'form_submissions_submission_data_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const form_submissions = pgTable(
  'form_submissions',
  {
    id: serial('id').primaryKey(),
    form: integer('form_id')
      .notNull()
      .references(() => forms.id, {
        onDelete: 'set null',
      }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    form_submissions_form_idx: index('form_submissions_form_idx').on(columns.form),
    form_submissions_updated_at_idx: index('form_submissions_updated_at_idx').on(columns.updatedAt),
    form_submissions_created_at_idx: index('form_submissions_created_at_idx').on(columns.createdAt),
  }),
)

export const search_categories = pgTable(
  'search_categories',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    relationTo: varchar('relation_to'),
    title: varchar('title'),
  },
  (columns) => ({
    _orderIdx: index('search_categories_order_idx').on(columns._order),
    _parentIDIdx: index('search_categories_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [search.id],
      name: 'search_categories_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const search = pgTable(
  'search',
  {
    id: serial('id').primaryKey(),
    title: varchar('title'),
    priority: numeric('priority'),
    slug: varchar('slug'),
    meta_title: varchar('meta_title'),
    meta_description: varchar('meta_description'),
    meta_image: integer('meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    search_slug_idx: index('search_slug_idx').on(columns.slug),
    search_meta_meta_image_idx: index('search_meta_meta_image_idx').on(columns.meta_image),
    search_updated_at_idx: index('search_updated_at_idx').on(columns.updatedAt),
    search_created_at_idx: index('search_created_at_idx').on(columns.createdAt),
  }),
)

export const search_rels = pgTable(
  'search_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    postsID: integer('posts_id'),
  },
  (columns) => ({
    order: index('search_rels_order_idx').on(columns.order),
    parentIdx: index('search_rels_parent_idx').on(columns.parent),
    pathIdx: index('search_rels_path_idx').on(columns.path),
    search_rels_posts_id_idx: index('search_rels_posts_id_idx').on(columns.postsID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [search.id],
      name: 'search_rels_parent_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: 'search_rels_posts_fk',
    }).onDelete('cascade'),
  }),
)

export const users_sites = pgTable(
  'users_sites',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    site: integer('site_id').references(() => sites.id, {
      onDelete: 'set null',
    }),
    role: enum_users_sites_role('role').notNull().default('user'),
  },
  (columns) => ({
    _orderIdx: index('users_sites_order_idx').on(columns._order),
    _parentIDIdx: index('users_sites_parent_id_idx').on(columns._parentID),
    users_sites_site_idx: index('users_sites_site_idx').on(columns.site),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [users.id],
      name: 'users_sites_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const users = pgTable(
  'users',
  {
    id: serial('id').primaryKey(),
    email: varchar('email').notNull(),
    sub: varchar('sub'),
    isAdmin: boolean('is_admin').default(false),
    selectedSiteId: numeric('selected_site_id'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    enableAPIKey: boolean('enable_a_p_i_key'),
    apiKey: varchar('api_key'),
    apiKeyIndex: varchar('api_key_index'),
  },
  (columns) => ({
    users_updated_at_idx: index('users_updated_at_idx').on(columns.updatedAt),
    users_created_at_idx: index('users_created_at_idx').on(columns.createdAt),
  }),
)

export const payload_locked_documents = pgTable(
  'payload_locked_documents',
  {
    id: serial('id').primaryKey(),
    globalSlug: varchar('global_slug'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_locked_documents_global_slug_idx: index('payload_locked_documents_global_slug_idx').on(
      columns.globalSlug,
    ),
    payload_locked_documents_updated_at_idx: index('payload_locked_documents_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_locked_documents_created_at_idx: index('payload_locked_documents_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const payload_locked_documents_rels = pgTable(
  'payload_locked_documents_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    postsID: integer('posts_id'),
    eventsID: integer('events_id'),
    newsID: integer('news_id'),
    mediaID: integer('media_id'),
    reportsID: integer('reports_id'),
    pagesID: integer('pages_id'),
    policiesID: integer('policies_id'),
    categoriesID: integer('categories_id'),
    sitesID: integer('sites_id'),
    'site-config-site-collectionID': integer('site_config_site_collection_id'),
    'collection-landing-pagesID': integer('collection_landing_pages_id'),
    redirectsID: integer('redirects_id'),
    formsID: integer('forms_id'),
    'form-submissionsID': integer('form_submissions_id'),
    searchID: integer('search_id'),
    usersID: integer('users_id'),
  },
  (columns) => ({
    order: index('payload_locked_documents_rels_order_idx').on(columns.order),
    parentIdx: index('payload_locked_documents_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_locked_documents_rels_path_idx').on(columns.path),
    payload_locked_documents_rels_posts_id_idx: index(
      'payload_locked_documents_rels_posts_id_idx',
    ).on(columns.postsID),
    payload_locked_documents_rels_events_id_idx: index(
      'payload_locked_documents_rels_events_id_idx',
    ).on(columns.eventsID),
    payload_locked_documents_rels_news_id_idx: index(
      'payload_locked_documents_rels_news_id_idx',
    ).on(columns.newsID),
    payload_locked_documents_rels_media_id_idx: index(
      'payload_locked_documents_rels_media_id_idx',
    ).on(columns.mediaID),
    payload_locked_documents_rels_reports_id_idx: index(
      'payload_locked_documents_rels_reports_id_idx',
    ).on(columns.reportsID),
    payload_locked_documents_rels_pages_id_idx: index(
      'payload_locked_documents_rels_pages_id_idx',
    ).on(columns.pagesID),
    payload_locked_documents_rels_policies_id_idx: index(
      'payload_locked_documents_rels_policies_id_idx',
    ).on(columns.policiesID),
    payload_locked_documents_rels_categories_id_idx: index(
      'payload_locked_documents_rels_categories_id_idx',
    ).on(columns.categoriesID),
    payload_locked_documents_rels_sites_id_idx: index(
      'payload_locked_documents_rels_sites_id_idx',
    ).on(columns.sitesID),
    payload_locked_documents_rels_site_config_site_collectio_idx: index(
      'payload_locked_documents_rels_site_config_site_collectio_idx',
    ).on(columns['site-config-site-collectionID']),
    payload_locked_documents_rels_collection_landing_pages_i_idx: index(
      'payload_locked_documents_rels_collection_landing_pages_i_idx',
    ).on(columns['collection-landing-pagesID']),
    payload_locked_documents_rels_redirects_id_idx: index(
      'payload_locked_documents_rels_redirects_id_idx',
    ).on(columns.redirectsID),
    payload_locked_documents_rels_forms_id_idx: index(
      'payload_locked_documents_rels_forms_id_idx',
    ).on(columns.formsID),
    payload_locked_documents_rels_form_submissions_id_idx: index(
      'payload_locked_documents_rels_form_submissions_id_idx',
    ).on(columns['form-submissionsID']),
    payload_locked_documents_rels_search_id_idx: index(
      'payload_locked_documents_rels_search_id_idx',
    ).on(columns.searchID),
    payload_locked_documents_rels_users_id_idx: index(
      'payload_locked_documents_rels_users_id_idx',
    ).on(columns.usersID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_locked_documents.id],
      name: 'payload_locked_documents_rels_parent_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: 'payload_locked_documents_rels_posts_fk',
    }).onDelete('cascade'),
    eventsIdFk: foreignKey({
      columns: [columns['eventsID']],
      foreignColumns: [events.id],
      name: 'payload_locked_documents_rels_events_fk',
    }).onDelete('cascade'),
    newsIdFk: foreignKey({
      columns: [columns['newsID']],
      foreignColumns: [news.id],
      name: 'payload_locked_documents_rels_news_fk',
    }).onDelete('cascade'),
    mediaIdFk: foreignKey({
      columns: [columns['mediaID']],
      foreignColumns: [media.id],
      name: 'payload_locked_documents_rels_media_fk',
    }).onDelete('cascade'),
    reportsIdFk: foreignKey({
      columns: [columns['reportsID']],
      foreignColumns: [reports.id],
      name: 'payload_locked_documents_rels_reports_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'payload_locked_documents_rels_pages_fk',
    }).onDelete('cascade'),
    policiesIdFk: foreignKey({
      columns: [columns['policiesID']],
      foreignColumns: [policies.id],
      name: 'payload_locked_documents_rels_policies_fk',
    }).onDelete('cascade'),
    categoriesIdFk: foreignKey({
      columns: [columns['categoriesID']],
      foreignColumns: [categories.id],
      name: 'payload_locked_documents_rels_categories_fk',
    }).onDelete('cascade'),
    sitesIdFk: foreignKey({
      columns: [columns['sitesID']],
      foreignColumns: [sites.id],
      name: 'payload_locked_documents_rels_sites_fk',
    }).onDelete('cascade'),
    'site-config-site-collectionIdFk': foreignKey({
      columns: [columns['site-config-site-collectionID']],
      foreignColumns: [site_config_site_collection.id],
      name: 'payload_locked_documents_rels_site_config_site_collection_fk',
    }).onDelete('cascade'),
    'collection-landing-pagesIdFk': foreignKey({
      columns: [columns['collection-landing-pagesID']],
      foreignColumns: [collection_landing_pages.id],
      name: 'payload_locked_documents_rels_collection_landing_pages_fk',
    }).onDelete('cascade'),
    redirectsIdFk: foreignKey({
      columns: [columns['redirectsID']],
      foreignColumns: [redirects.id],
      name: 'payload_locked_documents_rels_redirects_fk',
    }).onDelete('cascade'),
    formsIdFk: foreignKey({
      columns: [columns['formsID']],
      foreignColumns: [forms.id],
      name: 'payload_locked_documents_rels_forms_fk',
    }).onDelete('cascade'),
    'form-submissionsIdFk': foreignKey({
      columns: [columns['form-submissionsID']],
      foreignColumns: [form_submissions.id],
      name: 'payload_locked_documents_rels_form_submissions_fk',
    }).onDelete('cascade'),
    searchIdFk: foreignKey({
      columns: [columns['searchID']],
      foreignColumns: [search.id],
      name: 'payload_locked_documents_rels_search_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_locked_documents_rels_users_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_preferences = pgTable(
  'payload_preferences',
  {
    id: serial('id').primaryKey(),
    key: varchar('key'),
    value: jsonb('value'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_preferences_key_idx: index('payload_preferences_key_idx').on(columns.key),
    payload_preferences_updated_at_idx: index('payload_preferences_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_preferences_created_at_idx: index('payload_preferences_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const payload_preferences_rels = pgTable(
  'payload_preferences_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: integer('users_id'),
  },
  (columns) => ({
    order: index('payload_preferences_rels_order_idx').on(columns.order),
    parentIdx: index('payload_preferences_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_preferences_rels_path_idx').on(columns.path),
    payload_preferences_rels_users_id_idx: index('payload_preferences_rels_users_id_idx').on(
      columns.usersID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_preferences.id],
      name: 'payload_preferences_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_preferences_rels_users_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_migrations = pgTable(
  'payload_migrations',
  {
    id: serial('id').primaryKey(),
    name: varchar('name'),
    batch: numeric('batch'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_migrations_updated_at_idx: index('payload_migrations_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_migrations_created_at_idx: index('payload_migrations_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const site_config = pgTable(
  'site_config',
  {
    id: serial('id').primaryKey(),
    font: varchar('font'),
    agencyName: varchar('agency_name').default('Agency Name'),
    _status: enum_site_config_status('_status').default('draft'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
  },
  (columns) => ({
    site_config__status_idx: index('site_config__status_idx').on(columns._status),
  }),
)

export const _site_config_v = pgTable(
  '_site_config_v',
  {
    id: serial('id').primaryKey(),
    version_font: varchar('version_font'),
    version_agencyName: varchar('version_agency_name').default('Agency Name'),
    version__status: enum__site_config_v_version_status('version__status').default('draft'),
    version_updatedAt: timestamp('version_updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_createdAt: timestamp('version_created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    latest: boolean('latest'),
    autosave: boolean('autosave'),
  },
  (columns) => ({
    _site_config_v_version_version__status_idx: index(
      '_site_config_v_version_version__status_idx',
    ).on(columns.version__status),
    _site_config_v_created_at_idx: index('_site_config_v_created_at_idx').on(columns.createdAt),
    _site_config_v_updated_at_idx: index('_site_config_v_updated_at_idx').on(columns.updatedAt),
    _site_config_v_latest_idx: index('_site_config_v_latest_idx').on(columns.latest),
    _site_config_v_autosave_idx: index('_site_config_v_autosave_idx').on(columns.autosave),
  }),
)

export const menu_blocks_page_link = pgTable(
  'menu_blocks_page_link',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    label: varchar('label').notNull(),
    page: integer('page_id')
      .notNull()
      .references(() => pages.id, {
        onDelete: 'set null',
      }),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('menu_blocks_page_link_order_idx').on(columns._order),
    _parentIDIdx: index('menu_blocks_page_link_parent_id_idx').on(columns._parentID),
    _pathIdx: index('menu_blocks_page_link_path_idx').on(columns._path),
    menu_blocks_page_link_page_idx: index('menu_blocks_page_link_page_idx').on(columns.page),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [menu.id],
      name: 'menu_blocks_page_link_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const menu_blocks_collection_link = pgTable(
  'menu_blocks_collection_link',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    label: varchar('label').notNull(),
    page: integer('page_id')
      .notNull()
      .references(() => collection_landing_pages.id, {
        onDelete: 'set null',
      }),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('menu_blocks_collection_link_order_idx').on(columns._order),
    _parentIDIdx: index('menu_blocks_collection_link_parent_id_idx').on(columns._parentID),
    _pathIdx: index('menu_blocks_collection_link_path_idx').on(columns._path),
    menu_blocks_collection_link_page_idx: index('menu_blocks_collection_link_page_idx').on(
      columns.page,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [menu.id],
      name: 'menu_blocks_collection_link_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const menu_blocks_dropdown_sub_items = pgTable(
  'menu_blocks_dropdown_sub_items',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    label: varchar('label').notNull(),
    page: integer('page_id')
      .notNull()
      .references(() => pages.id, {
        onDelete: 'set null',
      }),
  },
  (columns) => ({
    _orderIdx: index('menu_blocks_dropdown_sub_items_order_idx').on(columns._order),
    _parentIDIdx: index('menu_blocks_dropdown_sub_items_parent_id_idx').on(columns._parentID),
    menu_blocks_dropdown_sub_items_page_idx: index('menu_blocks_dropdown_sub_items_page_idx').on(
      columns.page,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [menu_blocks_dropdown.id],
      name: 'menu_blocks_dropdown_sub_items_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const menu_blocks_dropdown = pgTable(
  'menu_blocks_dropdown',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    label: varchar('label').notNull(),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('menu_blocks_dropdown_order_idx').on(columns._order),
    _parentIDIdx: index('menu_blocks_dropdown_parent_id_idx').on(columns._parentID),
    _pathIdx: index('menu_blocks_dropdown_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [menu.id],
      name: 'menu_blocks_dropdown_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const menu = pgTable('menu', {
  id: serial('id').primaryKey(),
  updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }),
  createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
})

export const relations_posts_populated_authors = relations(posts_populated_authors, ({ one }) => ({
  _parentID: one(posts, {
    fields: [posts_populated_authors._parentID],
    references: [posts.id],
    relationName: 'populatedAuthors',
  }),
}))
export const relations_posts_rels = relations(posts_rels, ({ one }) => ({
  parent: one(posts, {
    fields: [posts_rels.parent],
    references: [posts.id],
    relationName: '_rels',
  }),
  categoriesID: one(categories, {
    fields: [posts_rels.categoriesID],
    references: [categories.id],
    relationName: 'categories',
  }),
  usersID: one(users, {
    fields: [posts_rels.usersID],
    references: [users.id],
    relationName: 'users',
  }),
}))
export const relations_posts = relations(posts, ({ one, many }) => ({
  image: one(media, {
    fields: [posts.image],
    references: [media.id],
    relationName: 'image',
  }),
  site: one(sites, {
    fields: [posts.site],
    references: [sites.id],
    relationName: 'site',
  }),
  populatedAuthors: many(posts_populated_authors, {
    relationName: 'populatedAuthors',
  }),
  _rels: many(posts_rels, {
    relationName: '_rels',
  }),
}))
export const relations__posts_v_version_populated_authors = relations(
  _posts_v_version_populated_authors,
  ({ one }) => ({
    _parentID: one(_posts_v, {
      fields: [_posts_v_version_populated_authors._parentID],
      references: [_posts_v.id],
      relationName: 'version_populatedAuthors',
    }),
  }),
)
export const relations__posts_v_rels = relations(_posts_v_rels, ({ one }) => ({
  parent: one(_posts_v, {
    fields: [_posts_v_rels.parent],
    references: [_posts_v.id],
    relationName: '_rels',
  }),
  categoriesID: one(categories, {
    fields: [_posts_v_rels.categoriesID],
    references: [categories.id],
    relationName: 'categories',
  }),
  usersID: one(users, {
    fields: [_posts_v_rels.usersID],
    references: [users.id],
    relationName: 'users',
  }),
}))
export const relations__posts_v = relations(_posts_v, ({ one, many }) => ({
  parent: one(posts, {
    fields: [_posts_v.parent],
    references: [posts.id],
    relationName: 'parent',
  }),
  version_image: one(media, {
    fields: [_posts_v.version_image],
    references: [media.id],
    relationName: 'version_image',
  }),
  version_site: one(sites, {
    fields: [_posts_v.version_site],
    references: [sites.id],
    relationName: 'version_site',
  }),
  version_populatedAuthors: many(_posts_v_version_populated_authors, {
    relationName: 'version_populatedAuthors',
  }),
  _rels: many(_posts_v_rels, {
    relationName: '_rels',
  }),
}))
export const relations_events_rels = relations(events_rels, ({ one }) => ({
  parent: one(events, {
    fields: [events_rels.parent],
    references: [events.id],
    relationName: '_rels',
  }),
  mediaID: one(media, {
    fields: [events_rels.mediaID],
    references: [media.id],
    relationName: 'media',
  }),
  categoriesID: one(categories, {
    fields: [events_rels.categoriesID],
    references: [categories.id],
    relationName: 'categories',
  }),
}))
export const relations_events = relations(events, ({ one, many }) => ({
  image: one(media, {
    fields: [events.image],
    references: [media.id],
    relationName: 'image',
  }),
  site: one(sites, {
    fields: [events.site],
    references: [sites.id],
    relationName: 'site',
  }),
  _rels: many(events_rels, {
    relationName: '_rels',
  }),
}))
export const relations__events_v_rels = relations(_events_v_rels, ({ one }) => ({
  parent: one(_events_v, {
    fields: [_events_v_rels.parent],
    references: [_events_v.id],
    relationName: '_rels',
  }),
  mediaID: one(media, {
    fields: [_events_v_rels.mediaID],
    references: [media.id],
    relationName: 'media',
  }),
  categoriesID: one(categories, {
    fields: [_events_v_rels.categoriesID],
    references: [categories.id],
    relationName: 'categories',
  }),
}))
export const relations__events_v = relations(_events_v, ({ one, many }) => ({
  parent: one(events, {
    fields: [_events_v.parent],
    references: [events.id],
    relationName: 'parent',
  }),
  version_image: one(media, {
    fields: [_events_v.version_image],
    references: [media.id],
    relationName: 'version_image',
  }),
  version_site: one(sites, {
    fields: [_events_v.version_site],
    references: [sites.id],
    relationName: 'version_site',
  }),
  _rels: many(_events_v_rels, {
    relationName: '_rels',
  }),
}))
export const relations_news_rels = relations(news_rels, ({ one }) => ({
  parent: one(news, {
    fields: [news_rels.parent],
    references: [news.id],
    relationName: '_rels',
  }),
  categoriesID: one(categories, {
    fields: [news_rels.categoriesID],
    references: [categories.id],
    relationName: 'categories',
  }),
}))
export const relations_news = relations(news, ({ one, many }) => ({
  image: one(media, {
    fields: [news.image],
    references: [media.id],
    relationName: 'image',
  }),
  site: one(sites, {
    fields: [news.site],
    references: [sites.id],
    relationName: 'site',
  }),
  _rels: many(news_rels, {
    relationName: '_rels',
  }),
}))
export const relations__news_v_rels = relations(_news_v_rels, ({ one }) => ({
  parent: one(_news_v, {
    fields: [_news_v_rels.parent],
    references: [_news_v.id],
    relationName: '_rels',
  }),
  categoriesID: one(categories, {
    fields: [_news_v_rels.categoriesID],
    references: [categories.id],
    relationName: 'categories',
  }),
}))
export const relations__news_v = relations(_news_v, ({ one, many }) => ({
  parent: one(news, {
    fields: [_news_v.parent],
    references: [news.id],
    relationName: 'parent',
  }),
  version_image: one(media, {
    fields: [_news_v.version_image],
    references: [media.id],
    relationName: 'version_image',
  }),
  version_site: one(sites, {
    fields: [_news_v.version_site],
    references: [sites.id],
    relationName: 'version_site',
  }),
  _rels: many(_news_v_rels, {
    relationName: '_rels',
  }),
}))
export const relations_media = relations(media, ({ one }) => ({
  site: one(sites, {
    fields: [media.site],
    references: [sites.id],
    relationName: 'site',
  }),
}))
export const relations_reports_report_files = relations(reports_report_files, ({ one }) => ({
  _parentID: one(reports, {
    fields: [reports_report_files._parentID],
    references: [reports.id],
    relationName: 'reportFiles',
  }),
  file: one(media, {
    fields: [reports_report_files.file],
    references: [media.id],
    relationName: 'file',
  }),
}))
export const relations_reports_rels = relations(reports_rels, ({ one }) => ({
  parent: one(reports, {
    fields: [reports_rels.parent],
    references: [reports.id],
    relationName: '_rels',
  }),
  categoriesID: one(categories, {
    fields: [reports_rels.categoriesID],
    references: [categories.id],
    relationName: 'categories',
  }),
}))
export const relations_reports = relations(reports, ({ one, many }) => ({
  image: one(media, {
    fields: [reports.image],
    references: [media.id],
    relationName: 'image',
  }),
  reportFiles: many(reports_report_files, {
    relationName: 'reportFiles',
  }),
  site: one(sites, {
    fields: [reports.site],
    references: [sites.id],
    relationName: 'site',
  }),
  _rels: many(reports_rels, {
    relationName: '_rels',
  }),
}))
export const relations__reports_v_version_report_files = relations(
  _reports_v_version_report_files,
  ({ one }) => ({
    _parentID: one(_reports_v, {
      fields: [_reports_v_version_report_files._parentID],
      references: [_reports_v.id],
      relationName: 'version_reportFiles',
    }),
    file: one(media, {
      fields: [_reports_v_version_report_files.file],
      references: [media.id],
      relationName: 'file',
    }),
  }),
)
export const relations__reports_v_rels = relations(_reports_v_rels, ({ one }) => ({
  parent: one(_reports_v, {
    fields: [_reports_v_rels.parent],
    references: [_reports_v.id],
    relationName: '_rels',
  }),
  categoriesID: one(categories, {
    fields: [_reports_v_rels.categoriesID],
    references: [categories.id],
    relationName: 'categories',
  }),
}))
export const relations__reports_v = relations(_reports_v, ({ one, many }) => ({
  parent: one(reports, {
    fields: [_reports_v.parent],
    references: [reports.id],
    relationName: 'parent',
  }),
  version_image: one(media, {
    fields: [_reports_v.version_image],
    references: [media.id],
    relationName: 'version_image',
  }),
  version_reportFiles: many(_reports_v_version_report_files, {
    relationName: 'version_reportFiles',
  }),
  version_site: one(sites, {
    fields: [_reports_v.version_site],
    references: [sites.id],
    relationName: 'version_site',
  }),
  _rels: many(_reports_v_rels, {
    relationName: '_rels',
  }),
}))
export const relations_pages = relations(pages, ({ one }) => ({
  image: one(media, {
    fields: [pages.image],
    references: [media.id],
    relationName: 'image',
  }),
  site: one(sites, {
    fields: [pages.site],
    references: [sites.id],
    relationName: 'site',
  }),
}))
export const relations__pages_v = relations(_pages_v, ({ one }) => ({
  parent: one(pages, {
    fields: [_pages_v.parent],
    references: [pages.id],
    relationName: 'parent',
  }),
  version_image: one(media, {
    fields: [_pages_v.version_image],
    references: [media.id],
    relationName: 'version_image',
  }),
  version_site: one(sites, {
    fields: [_pages_v.version_site],
    references: [sites.id],
    relationName: 'version_site',
  }),
}))
export const relations_policies = relations(policies, ({ one }) => ({
  site: one(sites, {
    fields: [policies.site],
    references: [sites.id],
    relationName: 'site',
  }),
}))
export const relations__policies_v = relations(_policies_v, ({ one }) => ({
  parent: one(policies, {
    fields: [_policies_v.parent],
    references: [policies.id],
    relationName: 'parent',
  }),
  version_site: one(sites, {
    fields: [_policies_v.version_site],
    references: [sites.id],
    relationName: 'version_site',
  }),
}))
export const relations_categories_breadcrumbs = relations(categories_breadcrumbs, ({ one }) => ({
  _parentID: one(categories, {
    fields: [categories_breadcrumbs._parentID],
    references: [categories.id],
    relationName: 'breadcrumbs',
  }),
  doc: one(categories, {
    fields: [categories_breadcrumbs.doc],
    references: [categories.id],
    relationName: 'doc',
  }),
}))
export const relations_categories = relations(categories, ({ one, many }) => ({
  site: one(sites, {
    fields: [categories.site],
    references: [sites.id],
    relationName: 'site',
  }),
  parent: one(categories, {
    fields: [categories.parent],
    references: [categories.id],
    relationName: 'parent',
  }),
  breadcrumbs: many(categories_breadcrumbs, {
    relationName: 'breadcrumbs',
  }),
}))
export const relations_sites = relations(sites, () => ({}))
export const relations_site_config_site_collection = relations(
  site_config_site_collection,
  ({ one }) => ({
    site: one(sites, {
      fields: [site_config_site_collection.site],
      references: [sites.id],
      relationName: 'site',
    }),
  }),
)
export const relations__site_config_site_collection_v = relations(
  _site_config_site_collection_v,
  ({ one }) => ({
    parent: one(site_config_site_collection, {
      fields: [_site_config_site_collection_v.parent],
      references: [site_config_site_collection.id],
      relationName: 'parent',
    }),
    version_site: one(sites, {
      fields: [_site_config_site_collection_v.version_site],
      references: [sites.id],
      relationName: 'version_site',
    }),
  }),
)
export const relations_collection_landing_pages = relations(collection_landing_pages, () => ({}))
export const relations_redirects_rels = relations(redirects_rels, ({ one }) => ({
  parent: one(redirects, {
    fields: [redirects_rels.parent],
    references: [redirects.id],
    relationName: '_rels',
  }),
  postsID: one(posts, {
    fields: [redirects_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
}))
export const relations_redirects = relations(redirects, ({ many }) => ({
  _rels: many(redirects_rels, {
    relationName: '_rels',
  }),
}))
export const relations_forms_blocks_checkbox = relations(forms_blocks_checkbox, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_checkbox._parentID],
    references: [forms.id],
    relationName: '_blocks_checkbox',
  }),
}))
export const relations_forms_blocks_country = relations(forms_blocks_country, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_country._parentID],
    references: [forms.id],
    relationName: '_blocks_country',
  }),
}))
export const relations_forms_blocks_email = relations(forms_blocks_email, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_email._parentID],
    references: [forms.id],
    relationName: '_blocks_email',
  }),
}))
export const relations_forms_blocks_message = relations(forms_blocks_message, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_message._parentID],
    references: [forms.id],
    relationName: '_blocks_message',
  }),
}))
export const relations_forms_blocks_number = relations(forms_blocks_number, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_number._parentID],
    references: [forms.id],
    relationName: '_blocks_number',
  }),
}))
export const relations_forms_blocks_select_options = relations(
  forms_blocks_select_options,
  ({ one }) => ({
    _parentID: one(forms_blocks_select, {
      fields: [forms_blocks_select_options._parentID],
      references: [forms_blocks_select.id],
      relationName: 'options',
    }),
  }),
)
export const relations_forms_blocks_select = relations(forms_blocks_select, ({ one, many }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_select._parentID],
    references: [forms.id],
    relationName: '_blocks_select',
  }),
  options: many(forms_blocks_select_options, {
    relationName: 'options',
  }),
}))
export const relations_forms_blocks_state = relations(forms_blocks_state, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_state._parentID],
    references: [forms.id],
    relationName: '_blocks_state',
  }),
}))
export const relations_forms_blocks_text = relations(forms_blocks_text, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_text._parentID],
    references: [forms.id],
    relationName: '_blocks_text',
  }),
}))
export const relations_forms_blocks_textarea = relations(forms_blocks_textarea, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_textarea._parentID],
    references: [forms.id],
    relationName: '_blocks_textarea',
  }),
}))
export const relations_forms_emails = relations(forms_emails, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_emails._parentID],
    references: [forms.id],
    relationName: 'emails',
  }),
}))
export const relations_forms = relations(forms, ({ many }) => ({
  _blocks_checkbox: many(forms_blocks_checkbox, {
    relationName: '_blocks_checkbox',
  }),
  _blocks_country: many(forms_blocks_country, {
    relationName: '_blocks_country',
  }),
  _blocks_email: many(forms_blocks_email, {
    relationName: '_blocks_email',
  }),
  _blocks_message: many(forms_blocks_message, {
    relationName: '_blocks_message',
  }),
  _blocks_number: many(forms_blocks_number, {
    relationName: '_blocks_number',
  }),
  _blocks_select: many(forms_blocks_select, {
    relationName: '_blocks_select',
  }),
  _blocks_state: many(forms_blocks_state, {
    relationName: '_blocks_state',
  }),
  _blocks_text: many(forms_blocks_text, {
    relationName: '_blocks_text',
  }),
  _blocks_textarea: many(forms_blocks_textarea, {
    relationName: '_blocks_textarea',
  }),
  emails: many(forms_emails, {
    relationName: 'emails',
  }),
}))
export const relations_form_submissions_submission_data = relations(
  form_submissions_submission_data,
  ({ one }) => ({
    _parentID: one(form_submissions, {
      fields: [form_submissions_submission_data._parentID],
      references: [form_submissions.id],
      relationName: 'submissionData',
    }),
  }),
)
export const relations_form_submissions = relations(form_submissions, ({ one, many }) => ({
  form: one(forms, {
    fields: [form_submissions.form],
    references: [forms.id],
    relationName: 'form',
  }),
  submissionData: many(form_submissions_submission_data, {
    relationName: 'submissionData',
  }),
}))
export const relations_search_categories = relations(search_categories, ({ one }) => ({
  _parentID: one(search, {
    fields: [search_categories._parentID],
    references: [search.id],
    relationName: 'categories',
  }),
}))
export const relations_search_rels = relations(search_rels, ({ one }) => ({
  parent: one(search, {
    fields: [search_rels.parent],
    references: [search.id],
    relationName: '_rels',
  }),
  postsID: one(posts, {
    fields: [search_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
}))
export const relations_search = relations(search, ({ one, many }) => ({
  meta_image: one(media, {
    fields: [search.meta_image],
    references: [media.id],
    relationName: 'meta_image',
  }),
  categories: many(search_categories, {
    relationName: 'categories',
  }),
  _rels: many(search_rels, {
    relationName: '_rels',
  }),
}))
export const relations_users_sites = relations(users_sites, ({ one }) => ({
  _parentID: one(users, {
    fields: [users_sites._parentID],
    references: [users.id],
    relationName: 'sites',
  }),
  site: one(sites, {
    fields: [users_sites.site],
    references: [sites.id],
    relationName: 'site',
  }),
}))
export const relations_users = relations(users, ({ many }) => ({
  sites: many(users_sites, {
    relationName: 'sites',
  }),
}))
export const relations_payload_locked_documents_rels = relations(
  payload_locked_documents_rels,
  ({ one }) => ({
    parent: one(payload_locked_documents, {
      fields: [payload_locked_documents_rels.parent],
      references: [payload_locked_documents.id],
      relationName: '_rels',
    }),
    postsID: one(posts, {
      fields: [payload_locked_documents_rels.postsID],
      references: [posts.id],
      relationName: 'posts',
    }),
    eventsID: one(events, {
      fields: [payload_locked_documents_rels.eventsID],
      references: [events.id],
      relationName: 'events',
    }),
    newsID: one(news, {
      fields: [payload_locked_documents_rels.newsID],
      references: [news.id],
      relationName: 'news',
    }),
    mediaID: one(media, {
      fields: [payload_locked_documents_rels.mediaID],
      references: [media.id],
      relationName: 'media',
    }),
    reportsID: one(reports, {
      fields: [payload_locked_documents_rels.reportsID],
      references: [reports.id],
      relationName: 'reports',
    }),
    pagesID: one(pages, {
      fields: [payload_locked_documents_rels.pagesID],
      references: [pages.id],
      relationName: 'pages',
    }),
    policiesID: one(policies, {
      fields: [payload_locked_documents_rels.policiesID],
      references: [policies.id],
      relationName: 'policies',
    }),
    categoriesID: one(categories, {
      fields: [payload_locked_documents_rels.categoriesID],
      references: [categories.id],
      relationName: 'categories',
    }),
    sitesID: one(sites, {
      fields: [payload_locked_documents_rels.sitesID],
      references: [sites.id],
      relationName: 'sites',
    }),
    'site-config-site-collectionID': one(site_config_site_collection, {
      fields: [payload_locked_documents_rels['site-config-site-collectionID']],
      references: [site_config_site_collection.id],
      relationName: 'site-config-site-collection',
    }),
    'collection-landing-pagesID': one(collection_landing_pages, {
      fields: [payload_locked_documents_rels['collection-landing-pagesID']],
      references: [collection_landing_pages.id],
      relationName: 'collection-landing-pages',
    }),
    redirectsID: one(redirects, {
      fields: [payload_locked_documents_rels.redirectsID],
      references: [redirects.id],
      relationName: 'redirects',
    }),
    formsID: one(forms, {
      fields: [payload_locked_documents_rels.formsID],
      references: [forms.id],
      relationName: 'forms',
    }),
    'form-submissionsID': one(form_submissions, {
      fields: [payload_locked_documents_rels['form-submissionsID']],
      references: [form_submissions.id],
      relationName: 'form-submissions',
    }),
    searchID: one(search, {
      fields: [payload_locked_documents_rels.searchID],
      references: [search.id],
      relationName: 'search',
    }),
    usersID: one(users, {
      fields: [payload_locked_documents_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
  }),
)
export const relations_payload_locked_documents = relations(
  payload_locked_documents,
  ({ many }) => ({
    _rels: many(payload_locked_documents_rels, {
      relationName: '_rels',
    }),
  }),
)
export const relations_payload_preferences_rels = relations(
  payload_preferences_rels,
  ({ one }) => ({
    parent: one(payload_preferences, {
      fields: [payload_preferences_rels.parent],
      references: [payload_preferences.id],
      relationName: '_rels',
    }),
    usersID: one(users, {
      fields: [payload_preferences_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
  }),
)
export const relations_payload_preferences = relations(payload_preferences, ({ many }) => ({
  _rels: many(payload_preferences_rels, {
    relationName: '_rels',
  }),
}))
export const relations_payload_migrations = relations(payload_migrations, () => ({}))
export const relations_site_config = relations(site_config, () => ({}))
export const relations__site_config_v = relations(_site_config_v, () => ({}))
export const relations_menu_blocks_page_link = relations(menu_blocks_page_link, ({ one }) => ({
  _parentID: one(menu, {
    fields: [menu_blocks_page_link._parentID],
    references: [menu.id],
    relationName: '_blocks_pageLink',
  }),
  page: one(pages, {
    fields: [menu_blocks_page_link.page],
    references: [pages.id],
    relationName: 'page',
  }),
}))
export const relations_menu_blocks_collection_link = relations(
  menu_blocks_collection_link,
  ({ one }) => ({
    _parentID: one(menu, {
      fields: [menu_blocks_collection_link._parentID],
      references: [menu.id],
      relationName: '_blocks_collectionLink',
    }),
    page: one(collection_landing_pages, {
      fields: [menu_blocks_collection_link.page],
      references: [collection_landing_pages.id],
      relationName: 'page',
    }),
  }),
)
export const relations_menu_blocks_dropdown_sub_items = relations(
  menu_blocks_dropdown_sub_items,
  ({ one }) => ({
    _parentID: one(menu_blocks_dropdown, {
      fields: [menu_blocks_dropdown_sub_items._parentID],
      references: [menu_blocks_dropdown.id],
      relationName: 'subItems',
    }),
    page: one(pages, {
      fields: [menu_blocks_dropdown_sub_items.page],
      references: [pages.id],
      relationName: 'page',
    }),
  }),
)
export const relations_menu_blocks_dropdown = relations(menu_blocks_dropdown, ({ one, many }) => ({
  _parentID: one(menu, {
    fields: [menu_blocks_dropdown._parentID],
    references: [menu.id],
    relationName: '_blocks_dropdown',
  }),
  subItems: many(menu_blocks_dropdown_sub_items, {
    relationName: 'subItems',
  }),
}))
export const relations_menu = relations(menu, ({ many }) => ({
  _blocks_pageLink: many(menu_blocks_page_link, {
    relationName: '_blocks_pageLink',
  }),
  _blocks_collectionLink: many(menu_blocks_collection_link, {
    relationName: '_blocks_collectionLink',
  }),
  _blocks_dropdown: many(menu_blocks_dropdown, {
    relationName: '_blocks_dropdown',
  }),
}))

type DatabaseSchema = {
  enum_posts_example_custom_field: typeof enum_posts_example_custom_field
  enum_posts_status: typeof enum_posts_status
  enum__posts_v_version_example_custom_field: typeof enum__posts_v_version_example_custom_field
  enum__posts_v_version_status: typeof enum__posts_v_version_status
  enum_events_format: typeof enum_events_format
  enum_events_event_type: typeof enum_events_event_type
  enum_events_status: typeof enum_events_status
  enum__events_v_version_format: typeof enum__events_v_version_format
  enum__events_v_version_event_type: typeof enum__events_v_version_event_type
  enum__events_v_version_status: typeof enum__events_v_version_status
  enum_news_status: typeof enum_news_status
  enum__news_v_version_status: typeof enum__news_v_version_status
  enum_reports_status: typeof enum_reports_status
  enum__reports_v_version_status: typeof enum__reports_v_version_status
  enum_pages_status: typeof enum_pages_status
  enum__pages_v_version_status: typeof enum__pages_v_version_status
  enum_policies_status: typeof enum_policies_status
  enum__policies_v_version_status: typeof enum__policies_v_version_status
  enum_site_config_site_collection_status: typeof enum_site_config_site_collection_status
  enum__site_config_site_collection_v_version_status: typeof enum__site_config_site_collection_v_version_status
  enum_redirects_to_type: typeof enum_redirects_to_type
  enum_forms_confirmation_type: typeof enum_forms_confirmation_type
  enum_users_sites_role: typeof enum_users_sites_role
  enum_site_config_status: typeof enum_site_config_status
  enum__site_config_v_version_status: typeof enum__site_config_v_version_status
  posts_populated_authors: typeof posts_populated_authors
  posts: typeof posts
  posts_rels: typeof posts_rels
  _posts_v_version_populated_authors: typeof _posts_v_version_populated_authors
  _posts_v: typeof _posts_v
  _posts_v_rels: typeof _posts_v_rels
  events: typeof events
  events_rels: typeof events_rels
  _events_v: typeof _events_v
  _events_v_rels: typeof _events_v_rels
  news: typeof news
  news_rels: typeof news_rels
  _news_v: typeof _news_v
  _news_v_rels: typeof _news_v_rels
  media: typeof media
  reports_report_files: typeof reports_report_files
  reports: typeof reports
  reports_rels: typeof reports_rels
  _reports_v_version_report_files: typeof _reports_v_version_report_files
  _reports_v: typeof _reports_v
  _reports_v_rels: typeof _reports_v_rels
  pages: typeof pages
  _pages_v: typeof _pages_v
  policies: typeof policies
  _policies_v: typeof _policies_v
  categories_breadcrumbs: typeof categories_breadcrumbs
  categories: typeof categories
  sites: typeof sites
  site_config_site_collection: typeof site_config_site_collection
  _site_config_site_collection_v: typeof _site_config_site_collection_v
  collection_landing_pages: typeof collection_landing_pages
  redirects: typeof redirects
  redirects_rels: typeof redirects_rels
  forms_blocks_checkbox: typeof forms_blocks_checkbox
  forms_blocks_country: typeof forms_blocks_country
  forms_blocks_email: typeof forms_blocks_email
  forms_blocks_message: typeof forms_blocks_message
  forms_blocks_number: typeof forms_blocks_number
  forms_blocks_select_options: typeof forms_blocks_select_options
  forms_blocks_select: typeof forms_blocks_select
  forms_blocks_state: typeof forms_blocks_state
  forms_blocks_text: typeof forms_blocks_text
  forms_blocks_textarea: typeof forms_blocks_textarea
  forms_emails: typeof forms_emails
  forms: typeof forms
  form_submissions_submission_data: typeof form_submissions_submission_data
  form_submissions: typeof form_submissions
  search_categories: typeof search_categories
  search: typeof search
  search_rels: typeof search_rels
  users_sites: typeof users_sites
  users: typeof users
  payload_locked_documents: typeof payload_locked_documents
  payload_locked_documents_rels: typeof payload_locked_documents_rels
  payload_preferences: typeof payload_preferences
  payload_preferences_rels: typeof payload_preferences_rels
  payload_migrations: typeof payload_migrations
  site_config: typeof site_config
  _site_config_v: typeof _site_config_v
  menu_blocks_page_link: typeof menu_blocks_page_link
  menu_blocks_collection_link: typeof menu_blocks_collection_link
  menu_blocks_dropdown_sub_items: typeof menu_blocks_dropdown_sub_items
  menu_blocks_dropdown: typeof menu_blocks_dropdown
  menu: typeof menu
  relations_posts_populated_authors: typeof relations_posts_populated_authors
  relations_posts_rels: typeof relations_posts_rels
  relations_posts: typeof relations_posts
  relations__posts_v_version_populated_authors: typeof relations__posts_v_version_populated_authors
  relations__posts_v_rels: typeof relations__posts_v_rels
  relations__posts_v: typeof relations__posts_v
  relations_events_rels: typeof relations_events_rels
  relations_events: typeof relations_events
  relations__events_v_rels: typeof relations__events_v_rels
  relations__events_v: typeof relations__events_v
  relations_news_rels: typeof relations_news_rels
  relations_news: typeof relations_news
  relations__news_v_rels: typeof relations__news_v_rels
  relations__news_v: typeof relations__news_v
  relations_media: typeof relations_media
  relations_reports_report_files: typeof relations_reports_report_files
  relations_reports_rels: typeof relations_reports_rels
  relations_reports: typeof relations_reports
  relations__reports_v_version_report_files: typeof relations__reports_v_version_report_files
  relations__reports_v_rels: typeof relations__reports_v_rels
  relations__reports_v: typeof relations__reports_v
  relations_pages: typeof relations_pages
  relations__pages_v: typeof relations__pages_v
  relations_policies: typeof relations_policies
  relations__policies_v: typeof relations__policies_v
  relations_categories_breadcrumbs: typeof relations_categories_breadcrumbs
  relations_categories: typeof relations_categories
  relations_sites: typeof relations_sites
  relations_site_config_site_collection: typeof relations_site_config_site_collection
  relations__site_config_site_collection_v: typeof relations__site_config_site_collection_v
  relations_collection_landing_pages: typeof relations_collection_landing_pages
  relations_redirects_rels: typeof relations_redirects_rels
  relations_redirects: typeof relations_redirects
  relations_forms_blocks_checkbox: typeof relations_forms_blocks_checkbox
  relations_forms_blocks_country: typeof relations_forms_blocks_country
  relations_forms_blocks_email: typeof relations_forms_blocks_email
  relations_forms_blocks_message: typeof relations_forms_blocks_message
  relations_forms_blocks_number: typeof relations_forms_blocks_number
  relations_forms_blocks_select_options: typeof relations_forms_blocks_select_options
  relations_forms_blocks_select: typeof relations_forms_blocks_select
  relations_forms_blocks_state: typeof relations_forms_blocks_state
  relations_forms_blocks_text: typeof relations_forms_blocks_text
  relations_forms_blocks_textarea: typeof relations_forms_blocks_textarea
  relations_forms_emails: typeof relations_forms_emails
  relations_forms: typeof relations_forms
  relations_form_submissions_submission_data: typeof relations_form_submissions_submission_data
  relations_form_submissions: typeof relations_form_submissions
  relations_search_categories: typeof relations_search_categories
  relations_search_rels: typeof relations_search_rels
  relations_search: typeof relations_search
  relations_users_sites: typeof relations_users_sites
  relations_users: typeof relations_users
  relations_payload_locked_documents_rels: typeof relations_payload_locked_documents_rels
  relations_payload_locked_documents: typeof relations_payload_locked_documents
  relations_payload_preferences_rels: typeof relations_payload_preferences_rels
  relations_payload_preferences: typeof relations_payload_preferences
  relations_payload_migrations: typeof relations_payload_migrations
  relations_site_config: typeof relations_site_config
  relations__site_config_v: typeof relations__site_config_v
  relations_menu_blocks_page_link: typeof relations_menu_blocks_page_link
  relations_menu_blocks_collection_link: typeof relations_menu_blocks_collection_link
  relations_menu_blocks_dropdown_sub_items: typeof relations_menu_blocks_dropdown_sub_items
  relations_menu_blocks_dropdown: typeof relations_menu_blocks_dropdown
  relations_menu: typeof relations_menu
}

declare module '@payloadcms/db-postgres' {
  export interface GeneratedDatabaseSchema {
    schema: DatabaseSchema
  }
}
